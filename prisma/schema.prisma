// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  fullName         String
  email            String             @unique
  password         String
  phoneNumber      String?
  profile          Profile?
  role             Role               @default(USER)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  isSubscribed     Boolean?
  subscriptions    UserSubscription[] // User can have multiple subscriptions over time
  promoCodes       PromoCode[] // User-created promo codes (if needed)
  resetToken       String? // token for password reset
  resetTokenExpiry DateTime? // expiry time for reset token
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime
}

model Profile {
  id       String  @id @default(uuid())
  name     String
  userName String? @unique
  phone    String?
  image    String?
  country  String?
  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id])
}

model Plan {
  id            String             @id @default(uuid())
  title         String
  description   String
  price         Float
  features      String[]
  planType      PlanType
  status        PlanStatus         @default(ACTIVE)
  // isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  // endDate       DateTime? // <- add this
  subscriptions UserSubscription[] // Who subscribed to this plan
}

model UserSubscription {
  id               String     @id @default(uuid())
  user             User       @relation(fields: [userId], references: [id])
  userId           String
  plan             Plan       @relation(fields: [planId], references: [id])
  planId           String
  startDate        DateTime   @default(now())
  endDate          DateTime
  isActive         Boolean    @default(true)
  appliedPromoCode PromoCode? @relation(fields: [promoCodeId], references: [id])
  promoCodeId      String?

  // ðŸ”½ Payment-related fields
  paymentStatus   PaymentStatus @default(PENDING)
  paymentIntentId String? // Stripe/Razorpay reference
  paymentMethod   String? // e.g., "card", "upi", "paypal"
  paidAt          DateTime?
  invoiceUrl      String? // Optional: Stripe invoice/receipt URL
}

model PromoCode {
  id        String             @id @default(uuid())
  code      String             @unique
  discount  Float
  expiresAt DateTime
  user      User?              @relation(fields: [userId], references: [id])
  userId    String?
  usedBy    UserSubscription[] // Tracks subscriptions that used this promo code
}

enum PlanType {
  MONTHLY
  YEARLY
}

enum PlanStatus {
  ACTIVE
  INACTIVE
  // CANCELLED
  // EXPIRED
}

enum PaymentStatus {
  PENDING
  PAID
  SUCCESS
  FAILED
  REFUNDED
}

enum Role {
  ADMIN
  USER
}
